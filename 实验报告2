实验报告2
                     电信1809 吴朝晖 U201813478     
需求分析：利用算法解决车厢调度问题  
         输入形式 int型 输入值范围 不限           
         输出形式 int型            
程序功能 解决车厢调度问题 
          测试数据 n=3
          输出值为 3 2 1，1 2 3， 2 3 1，2 1 3 ，1 3 2
概要设计 n为车厢数 
          主程序流程：1 设置链表  
                    2将所有车厢编号依次输入栈中
                    3利用递归得出一种可能然后输出，之后通过递归依次得出所有可能并输出
调用关系 排序函数调用压栈出栈函数和自身
        主函数调用排序函数和栈设置函数
详细设计：#include<string.h>
#include<stdlib.h>

#define STACK_INIT_SIZE   100
#define STACKINCREMENT   10
#define n 3

typedef struct{
	    int  *base;
	    int  *top;
	    int   stacksize;
              }SqStack;

int initstack(SqStack &S)//创建栈 
{
	S.base=(int*)malloc(STACK_INIT_SIZE*sizeof(int));
	S.top=S.base;
	S.stacksize=STACK_INIT_SIZE;
}

int push(SqStack &S,int e)//入栈 
{
	if(S.top-S.base>=S.stacksize)
	{
		S.base=(int*)realloc(S.base,(S.stacksize+STACKINCREMENT)*sizeof(int));
		S.top=S.base+S.stacksize;
		S.stacksize+=STACKINCREMENT;
	}
	*(S.top)++=e;
}

int pop(SqStack &S,int e)//出栈 
{
	e=*--S.top;
	return(e);
} 

int paixu(SqStack &S,int data, int a[], int i)//data为车厢序号，a[]储存不同的排序， 
{
	int temp,j,q;
	if(data<n)
	{
		push(S,data+1);//先把所有序号全部进栈 
		paixu(S,data+1,a,i);
		pop(S,q);	
	}
	if(S.base!=S.top)//出栈并排序 
	{
		temp=pop(S,q);
		a[i]=temp;//储存各种排序 
		i++;
		paixu(S,data,a,i);
		push(S,temp);		
	}
	if(data==n&&S.base==S.top)
	{
		for(j=0;j<i;j++)
		{
		printf("%4d",a[j]);//输出 
		}
		printf("\n");
	}
	
}
int main()
{
	SqStack S;
	int a[STACK_INIT_SIZE];
	initstack(S);
	push(S,1);
	paixu(S,1,a,0);
} 
调试分析：写完程序后无法输出，分析后发现主函数中忘了加上栈设置函数，之后加了上去    
使用说明：要修改车厢数的话可以直接在程序中改n的值，
测试结果：1: n=4 输出为
    4 3 2 1，3 4 2 1，3 2 4 1，3 2 1 4，2 4 3 1，2 3 4 1，2 3 1 4，2 1 4 3，2 1 3 4，1 4 3 2，1 3 4 2，1 3 2 4，1 2 4 3，1 2 3 4
时间复杂度为O(n)
       
